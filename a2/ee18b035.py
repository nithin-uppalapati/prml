# -*- coding: utf-8 -*-
"""EE18B035.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14DQ6ZDO79BzEN8FCGPIkQw2UvPcfW2Xc

# General Instructions to students:

1. There are 5 types of cells in this notebook. The cell type will be indicated within the cell.
    1. Markdown cells with problem written in it. (DO NOT TOUCH THESE CELLS) (**Cell type: TextRead**)
    2. Python cells with setup code for further evaluations. (DO NOT TOUCH THESE CELLS) (**Cell type: CodeRead**)
    3. Python code cells with some template code or empty cell. (FILL CODE IN THESE CELLS BASED ON INSTRUCTIONS IN CURRENT AND PREVIOUS CELLS) (**Cell type: CodeWrite**)
    4. Markdown cells where a written reasoning or conclusion is expected. (WRITE SENTENCES IN THESE CELLS) (**Cell type: TextWrite**)
    5. Temporary code cells for convenience and TAs. (YOU MAY DO WHAT YOU WILL WITH THESE CELLS, TAs WILL REPLACE WHATEVER YOU WRITE HERE WITH OFFICIAL EVALUATION CODE) (**Cell type: Convenience**)
    
2. You are not allowed to insert new cells in the submitted notebook.

3. You are not allowed to **import** any extra packages.

4. The code is to be written in Python 3.6 syntax. Latest versions of other packages maybe assumed.

5. In CodeWrite Cells, the only outputs to be given are plots asked in the question. Nothing else to be output/print. 

6. If TextWrite cells ask you to give accuracy/error/other numbers you can print them on the code cells, but remove the print statements before submitting.

7. Any runtime failures on the submitted notebook as it is will get zero marks.

8. All code must be written by yourself. Copying from other students/material on the web is strictly prohibited. Any violations will result in zero marks.

9. The dataset is given as .npz file, and will contain data in  numpy array. 

10. All plots must be labelled properly, all tables must have rows and columns named properly.

11. You are allowed to use the numpy library to calculate eigen values. All other functions for reconstruction, clustering, etc., should be written from scratch.

12. Change the name of the file with your roll no.
"""

# Cell type : CodeRead

import numpy as np
import matplotlib.pyplot as plt

"""**Cell type : TextRead**

# Problem 5: Life in Lower Dimensions

You are provided with a dataset of 1797 images - each image is 8x8 pixels and provided as a feature vector of length 64. You will try your hands at transforming this dataset to a lower-dimensional space using PCA, and perform K-means clustering the images in this reduced space.
 



"""

# Cell type : CodeWrite
# write the function for PCA and K-means clustering here. 


def euc_dist(a,b):
    dist=0
    for i in range(len(a)):
        dist += (a[i] - b[i])*(a[i] - b[i])
    return dist

def PCA(M, D, X):
    # M = THe integer representing the reduced dimensions
    # D is the current dimensions
    # X is the dataset.

    X_bar = np.mean(X,axis = 0)[None, :]
    S = np.dot(X.T-X_bar.T, X-X_bar)/len(X)
    eigenvals, eigenvecs = np.linalg.eig(S)
    # plt.plot(eigenvals)
    N = len(X)   # N = 1797
    U = np.array(eigenvecs)
    Z = np.zeros((N,M))
    b = np.zeros(D)
    for n in range(N):
        for i in range(M):
            Z[n,i] = np.dot(X[n], U[: , i])
    for i in range(M,D):
        b[i] = np.dot(X_bar, U[: , i])
    
    X_tilde = np.zeros(X.shape)   # shape is (1797, 64)
    
    for n in range(N):
        for i in range(M):
            X_tilde[n, : ] += Z[n,i]*U[: , i].T
        for i in range(M,D):
            X_tilde[n, : ] += b[i]*U[: , i].T
    
    return [Z,X_tilde,eigenvals]


def K_Means(X,k):
    # k= int, desired no. of clusters
    # X= Dataset.
    # returns, the cluster centers for the given data and also the cluster points

    kmeans_old=np.zeros([k,len(X[0])])
    kmeans    =np.zeros([k,len(X[0])])
    cluster_collec={}
    
    # cluster_collec=[]

    for i in range(k):
        kmeans[i] = X[i]
        cluster_collec[i]=[]


    # IDEA, append the cluster points in a list, which have k sub-lists.
    cnt=30
    while ( np.sum( kmeans!=kmeans_old ) ):
    # while ( cnt):
        # cnt = cnt - 1
        for i in range(k):
            cluster_collec[i]=[]
        
        ### Assignment Step:
        for i in range(len(X)):
            dist_est=np.zeros(k)
            for j in range(k):
                dist_est[j]=euc_dist(kmeans[j],X[i])
            # np.argmin(dist_est)
            cluster_collec[int(np.argmin(dist_est))].append(X[i])
        
        ### Updating K-Means:
        kmeans_old = kmeans.copy()
        means_calc=np.zeros([k,len(X[0])])
        for i in range(k):
            for j in cluster_collec[i]:
                means_calc[i]+=j
            means_calc[i] = means_calc[i]/(len(cluster_collec[i]))   ### Source of error!
            
        kmeans = means_calc.copy()

    f=cluster_collec.copy()
        
    return [kmeans, f]

"""**Cell type : TextRead**

# Problem 5

#### 5a) Run PCA algorithm on the given data-set. Plot the cumulative percentage variance explained by the principal components. Report the number of principal components that contribute to 90% of the variance in the dataset.



"""

# Cell type : CodeWrite
# write the code for loading the data, running the PCA algorithm, and plotting. 
# (Use the functions written previously.)


f= np.load("/Users/nithinuppalapati/Desktop/IITM_Folder/Semester_VI/CS5691/Assignments/a2/Data.npz")
d_array=f['arr_0']



X=d_array.copy()

X_bar = np.mean(X,axis = 0)[None, :]
S = np.dot(X.T-X_bar.T, X-X_bar)/len(X)
eigenvals, eigenvecs = np.linalg.eig(S)

sum_tot_eigvs=0
for k in eigenvals:
    sum_tot_eigvs +=k

pca90_cnt=0

x_l=[]
y_l=[]
lst_pca90=[]

for i in range(1,65):
    sum_eigvs=0
    for j in range(i):
        sum_eigvs += eigenvals[j]
    x_l.append(i)
    y_l.append(sum_eigvs/sum_tot_eigvs)
    if (sum_eigvs/sum_tot_eigvs) >= 0.9:
        pca90_cnt+=1
        lst_pca90.append(i)

plt.figure(0)
plt.plot(x_l,y_l,label="plt")
plt.plot(x_l,[0.9]*len(x_l), label="90%", linewidth=0.5 )
plt.plot([21]*len(x_l),np.linspace(0,1,len(x_l)), "--", label="K=21",  linewidth=0.5 )
plt.plot([20]*len(x_l),np.linspace(0,1,len(x_l)), "--", label="K=20",  linewidth=0.5 )
# plt.plot([21]*len(x_l),np.linspace(0,1,len(x_l)))
plt.legend(loc="right")
plt.xlabel("Principal Components $\longrightarrow$")
plt.ylabel("Variance $\longrightarrow$")
# print("No. of principal components that contribute to 90 percent of the variance in the dataset is: ", 64 - pca90_cnt + 1)
# print(lst_pca90)
# print(eigenvals)

"""####5b)  Perform reconstruction of data using the dimensionality-reduced data considering the number of dimensions [2,4,8,16]. Report the Mean Square Error (MSE) between the original data and reconstructed data, and interpret the optimal dimensions $\hat{d}$ based on the MSE values.


"""

# Cell type : CodeWrite
# Write the code for data reconstruction, run the algorithm for dimensions.

M=[2,4,8,16]
l=[]
for i in M:
    ans=PCA(i,64,d_array)
    recons_d_array = ans[1]
    sq_error=0
    for i in range(len(d_array)):
        sq_error+= euc_dist(d_array[i],recons_d_array[i])
    sq_error = sq_error / len(d_array)
    l.append(sq_error)
    
# print(l)

"""####5c) Apply K-means clustering on the reduced dataset from last subpart (b) (i.e., the $R^{64}$ to $R^\hat{d}$ reduced dataset; pick the initial k points as cluster centers during initialization). Report the optimal choice of K you have made from the set [1...15]. Which method did you choose to find the optimum number of clusters? And explain briefy why you chose that method. Also, show the 2D scatter plot (consider only the first two dimensions of optimal $\hat{d}$) of the datapoints based on the cluster predicted by K-means (use different color for each cluster).

"""

# Cell type : CodeWrite
# Write the code for dimensionality reduction, run k-means algorithm on the reduced data-set and do plotting.

ans=PCA(16,64,d_array)
temp_lst=[]
x_l=[]
y_l=[]
for i in range(1,16):
    x_l.append(i)
    sol=K_Means(ans[0],i)
    temp_lst.append(sol)
    sum_error=0
    for i in range(len(sol[0])):
        for j in sol[1][i]:
            sum_error+= euc_dist(sol[0][i], j)
    sum_error = sum_error/len(ans[0])
    y_l.append(sum_error)

plt.figure("optimum_clusters")
plt.plot(x_l,y_l,"bo-")
plt.xlabel("No. of Clusters")
plt.ylabel("MSE of datapoints w.r.t. cluster centers")
plt.show()



plt.figure('Clusters')
fin_sol = temp_lst[8]
kmeans_opt = fin_sol[0]
clust_opt = fin_sol[1] ## this is dictionary

color_lst = ["blue","lime","red","yellow","orange","magenta","olive","grey","deepskyblue"]
cnt=0
for i in range(len(kmeans_opt)):
    for j in clust_opt[i]:
        plt.scatter(j[0],j[1],s=3, c=color_lst[cnt])
    cnt+=1

cnt=0
flag=0
for i in range(len(kmeans_opt)):
    if flag ==0:
        plt.scatter(kmeans_opt[i][0], kmeans_opt[i][1],s=20,c="black", label="Cluster Center")
        flag+=1
    else:
        plt.scatter(kmeans_opt[i][0], kmeans_opt[i][1],s=20,c="black")
    cnt+=1
plt.legend(loc="lower right")
plt.xlabel("First Dimension")
plt.ylabel("Second Dimension")
plt.show()




# print(sol)

"""####5d) In the next TextWrite cell, Summarise and explain your observations from the above experiments. Is the PCA+K-means clustering consistent with how your brain would cluster the images?

**Cell type : TextWrite**

Report your observations, MSE values and the method used to choose the optimal number of clusters.


MSE Values:

|Dimensions |2|4|8|16|
|------|------|------|------|
|MSE  |858.94 |616.19| 391.79|180.93|

We observe a steep from k=8 to k=9, which indicates that k=9 cluster is more optimal when compared to that of k=8.

But, if we analyse the graph from k=9 to k=10, wee observe not much steep decrease, and rather a linear fashion of decreasing monotonicity, with lesser slope.

So, by Elbow method, we can arrive at a conclusion that k=9 is the optimal number of clusters.

Yes, PCA+K-means clustering is consistent with how my intuition works.


Observations:

Although we get the optimum no. of clusters as k=9, I intuitively think that the optimum no. of clusters should be k=10.
    
The reason is, as there are 10 digits in total, which are [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] and ideally there should be 10 clusters. The probable reason for why we got 9 optimal clusters is, maybe there are few ill-defined (not properly specified numbers) numbers in the dataset (for example, please see the image below) (imaage attached in .pdf file). And maybe due to these kind of noisy characters the distinction between the numbers is lost.
"""